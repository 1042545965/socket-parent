https://www.cnblogs.com/aiyoubucuoo/archive/2016/05/04/5457396.html //eclipce githup
https://blog.csdn.net/jone_lu/article/details/44656773 //github的绝世好文啊
https://blog.csdn.net/tingzhiyi/article/details/76101031 //github跟新项目遇到的问题

https://www.cnblogs.com/ggwow/p/7994213.html //netty websocket

关于socket的记录
  socket是应用层（也就是用户）和tcp/ip协议族通信的软件抽象层，他是一组接口
  socket三次握手简历连接，四次挥手释放连接
netty：
    基于nio的客户端服务端的编程框架
    
netty的使用场景
	1:高性能游戏领域
	2:多线程并发领域
	3：异步通信领域

首先是io通信模块
	bio通信
		一个线程负责连接
		一请求一应答
		缺乏弹性应答能力
		问题：并发增大时，出现内存溢出
	伪异步io通信（和bio最大的不同点是不会每一个连接建立一个线程，而是由线程池进行管理）
		线程池负责连接
		当客户端有m个请求是，客户端会建立一个有n个线程的线程池进行连接(应为有线程池，所以并发是可控的。不会出现高并发产生的宕机事件)
		并发的不断增加，伪异步io通信可能会造成线程池阻塞	
	nio通信
		缓冲区buffer（所有数据都是用缓冲去处理的）
		通道channel（通道是双向的，可以读也可以写）
		nio的多路复用器selector（他会轮询channel，有channel在进行读写的时候就会被他轮询出来，通过key）
		没有最大连接数的限制，可以接入成千上万个用户
		nio非阻塞同步的io
	aio通信
		连接注册读写事件和回调函数
		读写方法异步
		主动通知程序，不需要selector的轮询，简化了nio的编程模型
		非阻塞异步的io
		
原生nio的缺陷
	类库繁杂
	工作量太大
	入门门槛高
	java的nio存在轮询的bug
	netty的优势
		api简单
		门槛低
		综合新能最新
		成熟，稳定。
websocket
	H5协议规范
	握手机制（在客户端与服务端握手之后就不需要客户端和服务端在进行握手参与了）
	解决客户端和服务端进行的通信功能
	优点：
		节省通信开销
		服务器主动传送数据给服务端
		（以前webserver实现即时通讯使用的是轮询机制，在特定的时间间隔由客户端向服务器进行请求，但是http的header里面的内容是很多的。但是带回来的文本可能很少）
		实现实时通信
	websocket建立连接
		客户端发起请求
		服务器端响应请求
		建立连接
	websocket的生命周期
		打开事件
			发生在新的连接时进行调用有三部分信息
				websocket  session对象，用于表示已经建立好的连接
				配置对象 包含了用来配置端点的信息
				一组路径参数 打开握手时websocket入站时的url
		消息事件
			消息将已三种基本形式抵达
				文本消息
				二进制消息
				ping消息
		错误事件
			在websocket 连接或者端点发生错误时发生
				能处理入站消息时的任何异常
		关闭事件
	websocket关闭连接
		服务器底层关闭tcp连接（正常情况下，应该先是服务器来关闭）
		客户端发起tcp close
		